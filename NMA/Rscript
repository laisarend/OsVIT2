### load packages ###
library(bio3d)
library(igraph)
library(RColorBrewer)
library(colourvalues)

### function to displace structure along normal modes up to a desired magnitude ###
displace.nma <- function(pdb,vec,rms,selection,outname){
  xyz <- as.vector(pdb$xyz)
  if(selection == 'calpha'){
    pdb.inds <- atom.select(pdb, string = 'calpha')
    mag <- sqrt(length(pdb.inds$atom)) * rms / sqrt(sum(vec * vec))
    plus <- vec*mag + xyz
  }
  if(selection == 'noh'){
    pdb.inds <- atom.select(pdb, string = 'noh')
    mag <- sqrt(length(pdb.inds$atom)) * rms / sqrt(sum(vec * vec))
    plus <- vec*mag + xyz
  }
  #coor <- t(cbind(xyz, plus))
  write.pdb(pdb=pdb, xyz = plus, file = outname)
}

### function to generate linear combination of vectors according to Eq. 1 in Costa et al. (2015) ###
combine <- function(M, v){
  n <- length(v)
  if(n > 1){
    out <- M[,1] * v[1]
    if(ncol(M) != n) stop("The number of vectors and alphas must be equal ")
    for(i in 2:n){
      out <- out + M[,i] * v[i]
    }
  }else{
    out <- M * v[1]
  }
  # normalize resulting vectors 
  out / sqrt(sum(out*out))
}

### load and trim pdb ###
pdb <- read.pdb("npt6.pdb")
pdb.calpha <- trim.pdb(pdb = pdb, 'calpha')

### calculate normal modes ###
modes.calpha <- aanma.pdb(pdb = pdb.calpha, outmodes = 'calpha', rtb = TRUE, keep = 100)

### identify modes that contribute to pore opening ###
prot <- length(pdb.calpha$atom$type)
modes_distances <- data.frame(matrix(ncol=6, nrow=0))
d_ref <- dm(pdb.calpha)
d.ref_leu47 <- d_ref[47,293]
d.ref_leu51 <- d_ref[51,297]
d.ref_leu60 <- d_ref[60,306]
d.ref_asp39 <- d_ref[39,285]
d.ref_glu68 <- d_ref[68,314]
threshold_1.0 = 1.0
threshold_0.5 = 0.5
accepted.modes <- NULL
for(i in 7:100){
  subset=c(i)
  nmodes=length(subset)
  mode.dir= c(-1,1)
  for(alpha.q in mode.dir){
    q <- matrix(0, nr = 3*prot, nc = length(subset))
    q  <- modes.calpha$U[,subset]
    Q.aux <- combine(q, alpha.q)
    displace.nma(pdb = pdb.calpha, vec = Q.aux, rms = 2, selection = 'calpha', outname = paste0("trial.pdb"))
    trial.pdb <- read.pdb("trial.pdb")
    trial.pdb.calpha <- trim.pdb(trial.pdb, "calpha")
    d_trial <- dm(trial.pdb.calpha)
    d.trial_asp39 <- d_trial[39,285]
    d.trial_glu68 <- d_trial[68,314]
    d.trial_leu47 <- d_trial[47,293]
    d.trial_leu51 <- d_trial[51,297]
    d.trial_leu60 <- d_trial[60,306]
    if(d.trial_leu47 - d.ref_leu47 > threshold_0.5 & d.trial_leu51 - d.ref_leu51 > threshold_0.5 & d.trial_leu60 - d.ref_leu60 > threshold_0.5){
      accepted.modes <- c(i,accepted.modes)
      modes_distances[nrow(modes_distances)+1,] = c(i, d.trial_leu47 - d.ref_leu47, d.trial_leu51 - d.ref_leu51, d.trial_leu60 - d.ref_leu60, d.trial_asp39 - d.ref_asp39, d.trial_glu68 - d.ref_glu68)
    }
  }
}

### generate trajectories to visualize selected modes ###
for(i in accepted.modes){
  mktrj(modes.calpha, mode=i, pdb=pdb.calpha, mag = 15, step = 5,
        file = paste0('./accepted_mode_',i,'.pdb'))
  print(i)
}

### calculate average correlation of pairs of Leu 47, 51 and 60 with every residue down the protein for a selected mode and generate plot ###
modes.temp <- modes.calpha
modes.temp$U <- modes.calpha$U[,c(1:6, 97)] 
modes.temp$L <- modes.calpha$L[c(1:6, 97)]
cij.97 <- dccm.nma(x = modes.temp, nmodes = 1)
cij.97_filtered <- cij.97[c(39, 47, 51, 60, 68, 285, 293, 297, 306, 314),]
average <- colMeans(abs(cij.97_filtered))
dataset <- data.frame(modes = seq(1, 492, by=1), corr = average)
dataset$col <- colour_values(dataset$corr, palette = "Viridis")
plot(seq(1, 492, by = 1), dataset$corr, col = dataset[["col"]], type = 'h', lwd = 15, xaxp = c(0, 500, 50), ylim = c(0, 1))












